1=> Kullanıcı kayıt sistemi yazılacak
2=> Kullanıcı kayıt sistemi üzerinden kayıt oldugu zaman E-Mail gönderilmesini saglayan bir sistem yaratılacak. Bu sistem kullanıcıya bir aktivasyon E-Mail'i gönderecek...Kullanıcı bu E-Mail'e tıkladıgı zaman üyeligi onaylanacak...Bu üyelik onaylanmadan kullanıcı üye olarak sisteme giriş yapamayacak...
3=> Kullanıcı siteye ilk girdigi anda alısveriş sitesine düsecek isterse üye olmadan da alısveriş yapabilecek  , isterse önce üye de olacak... Sepetine buradan ürünleri atabilecek...
4=> Sepetini gözlemleyen kullanıcı ürünlerin siparişini verebilecek
5=> Banka'ya API üzerinden baglanarak kullanıcının kredi kartı bilgilerinin verify ettirecegiz...
6=> Verify onaylandıktan sonra Siparis sql'e eklenecek... 
7=> Kullanıcıların vermiş oldugu siparişler Admin panelinden izlenebilsin...

-----------------------------------------------

1=> Proje N-Tier mimari paternine göre yazılacaktır
2=> Projede Code First yöntemi kullanılacaktır.
3=> Projede Türkçe karakter kullanılmayacaktır...
4=> Proje class isimleri tekil ve PascalCase olacaktır, field isimleri _ sembolü ile baslayıp camelCase olacaktır, Property isimler PascalCase olacaktır, local variable camelCase olacaktır, Metotlar PascalCase olacaktır...
5=> Projede kullanılacak Design Patterns : Singleton, GenericRepository, Strategy Patternler kullanılacak 
             Singleton : Projede veritabanı sınıfı üzerinde kullanılacaktır...Veritabanı sınıfından sadece 1 instance alıp sürekli bu instance'i kullanacagız birden fazla instance almaya gerek yok ...
             GenericRepository: Kişiselleştirmek istedigimiz işlemleri ilgili sınıflar icin belirli catılar acarak bu depolar üzerinden kullanmak adına yaptıgımız algoritmaya destek veren bir tasarım patternidir...
             Strategy : Yaratacagımız veritabanına aynı zamanda yaratılırken veriler eklemek icin ekleyecegimiz verilerin planını bir baska class'ta düzenleyip Veritabanı sınıfımızın bu blogu cagırmasını istedigimizden dolayı kullandıgımız bir tasarım patternidir...
6=> Katman isimleri Project ile baslayarak . sembolünden sonra katmansal takıların birleşmesiyle oluşacaktır...
7=> Projede acılacak katmanlar
Entities,
Map,
DAL,
BLL,
Common (Ortak kullanılacak sınıfların tutuldugu katman olacaktır),
DTO(API'daki esnekligimizin proje bazlı artması icin acacagımız katmandır),
API(Projemizi dısarı acmak istedigimiz zamanlar icin hazır bulunacak ayrı bir katmandır),
MVCUI
8=> Mevcut algoritmada 5. maddede bahsedilen Design Patternler'in dısında baska bir Tasarım Paterni öngörülmemektedir...Mevcut tasarım patternleri N-Tier Mimari ile tam uyum saglamaktadır...Ancak projenin esnekligi buna elverişli oldugundan eger cok gerekli görülürse N-Tier ile uyumlu calısan  diger Tasarım Patternleri rahatca eklenebilir
   